
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
//DataBinding适配kotlin
apply plugin: 'kotlin-kapt'
//AOP注解
//apply plugin: 'android-aspectjx'



Properties properties = new Properties()
InputStream inputStream = rootProject.file('local.properties').newDataInputStream()

properties.load(inputStream)
android {

    signingConfigs {
        release {
            File strFile = new File("../signing/xiaolanlaia.jks")
            storeFile file(strFile)
            storePassword properties.getProperty("keyPassword")
            keyAlias properties.getProperty("keyAlias")
            keyPassword properties.getProperty("keyPassword")
        }
        debug {
            File strFile = new File("../signing/xiaolanlaia.jks")
            storeFile file(strFile)
            storePassword properties.getProperty("keyPassword")
            keyAlias properties.getProperty("keyAlias")
            keyPassword properties.getProperty("keyPassword")
        }
    }



    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "wu"
        signingConfig signingConfigs.release
        //保留中文和英文国际化支持
        resConfigs "en","zh"
    }


    flavorDimensions 'wu'
    productFlavors{
        xiaolanlaia{
            dimension 'wu'
            applicationId "com.w.xiaolanlaia"
            resValue "string","app_name","xiaolanlaia"
            resValue "bool","isrRank",'false'
            buildConfigField "String","ENVIRONMENT",'"xiaolanlaia"'
            manifestPlaceholders = [
                    ENVIRONMENT : "xiaolanlaia",
                    app_name    : "晓懒来啊",
                    app_icon    : "@mipmap/ic_launcher",
                    app_style   : "@style/AppTheme",


            ]
        }

        niuniu{
            dimension 'wu'
            applicationId "com.w.niuniu"
            resValue "string","app_name","niuniu"
            resValue "bool","isrRank",'false'
            buildConfigField "String","ENVIRONMENT",'"niuniu"'
            manifestPlaceholders = [
                    ENVIRONMENT : "niuniu",
                    app_name    : "牛牛",
                    app_icon    : "@mipmap/ic_launcher",
                    app_style   : "@style/AppTheme",



            ]
        }
    }
    buildTypes {

        debug{
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //开启kotlin协程
    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 移除lint检测的error
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dataBinding{
        enabled = true
    }

    /**
     * apk打包
     */

    android.applicationVariants.all { variant ->

        def buildType = variant.buildType.name
        def fileName
        def createTime = new Date().format("YYYY-MM-dd",TimeZone.getTimeZone("GMT+08:00"))

        variant.outputs.all{
            if(buildType == "release"){
                variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + "/apks/${buildType}/$createTime")
                fileName = "${variant.name}_v${defaultConfig.versionName}_${createTime}_${buildType}.apk"
                it.outputFileName = fileName

            }
        }


    }
}

kapt{

    generateStubs = true

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["lifecycle-extensions"]
    implementation rootProject.ext.dependencies["pullrefreshlayout"]
    implementation rootProject.ext.dependencies["WheelPicker"]
    implementation rootProject.ext.dependencies["kotlin-stdlib-jdk7"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["aspectjrt"]
    implementation rootProject.ext.dependencies["aop-arms"]
    //anko
    implementation rootProject.ext.dependencies["anko"]

    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]



}
